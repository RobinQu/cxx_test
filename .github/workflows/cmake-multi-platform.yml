# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          # - os: windows-latest
          #   c_compiler: cl
          #   cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          # - os: windows-latest
          #   c_compiler: gcc
          # - os: windows-latest
          #   c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
    steps:
    - uses: actions/checkout@v4
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
    - name: "Update gcc"
      if: matrix.os == "ubuntu-latest"
      run: |
        apt-get -y update && \
        apt-get install -y build-essential gcc-12 g++-12 && \
        update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 12 --slave /usr/bin/g++ g++ /usr/bin/g++-12
    - name: Get Conan
      uses: turtlebrowser/get-conan@v1.2
      with:
        version: 2.4.1
    - name: Create conan profile
      run: |
        conan profile detect
    - name: Cache
      uses: actions/cache@v4.0.2
      with:
        path: "~/.conan2"
        key: ${{ matrix.os }}-${{ matrix.build_type }}-${{matrix.cpp_compiler}}
    - name: Conan install
      run: conan install conanfile.py --build=missing
    - name: Conan build (with ctest)
      run: conan build .

